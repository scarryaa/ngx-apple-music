export var MediaItemType;
(function (MediaItemType) {
    MediaItemType[MediaItemType["albums"] = 0] = "albums";
    MediaItemType[MediaItemType["songs"] = 1] = "songs";
    MediaItemType[MediaItemType["artists"] = 2] = "artists";
    MediaItemType[MediaItemType["musicVideos"] = 3] = "musicVideos";
    MediaItemType[MediaItemType["playlists"] = 4] = "playlists";
    MediaItemType[MediaItemType["stations"] = 5] = "stations";
})(MediaItemType || (MediaItemType = {}));
export var PlaylistType;
(function (PlaylistType) {
    PlaylistType[PlaylistType["editorial"] = 0] = "editorial";
    PlaylistType[PlaylistType["external"] = 1] = "external";
    PlaylistType[PlaylistType["personalMix"] = 2] = "personalMix";
    PlaylistType[PlaylistType["replay"] = 3] = "replay";
    PlaylistType[PlaylistType["userShared"] = 4] = "userShared";
})(PlaylistType || (PlaylistType = {}));
export var TrackTypes;
(function (TrackTypes) {
    TrackTypes[TrackTypes["musicVideos"] = 0] = "musicVideos";
    TrackTypes[TrackTypes["songs"] = 1] = "songs";
})(TrackTypes || (TrackTypes = {}));
export var MediaKind;
(function (MediaKind) {
    MediaKind[MediaKind["audio"] = 0] = "audio";
    MediaKind[MediaKind["video"] = 1] = "video";
})(MediaKind || (MediaKind = {}));
export var ContentRating;
(function (ContentRating) {
    ContentRating[ContentRating["clean"] = 0] = "clean";
    ContentRating[ContentRating["explicit"] = 1] = "explicit";
})(ContentRating || (ContentRating = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWFwcGxlLW11c2ljLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1hcHBsZS1tdXNpYy9zcmMvbGliL25neC1hcHBsZS1tdXNpYy5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFOLElBQVksYUFPWDtBQVBELFdBQVksYUFBYTtJQUNyQixxREFBTSxDQUFBO0lBQ04sbURBQUssQ0FBQTtJQUNMLHVEQUFPLENBQUE7SUFDUCwrREFBVyxDQUFBO0lBQ1gsMkRBQVMsQ0FBQTtJQUNULHlEQUFRLENBQUE7QUFDWixDQUFDLEVBUFcsYUFBYSxLQUFiLGFBQWEsUUFPeEI7QUFFRCxNQUFNLENBQU4sSUFBWSxZQU1YO0FBTkQsV0FBWSxZQUFZO0lBQ3BCLHlEQUFTLENBQUE7SUFDVCx1REFBUSxDQUFBO0lBQ1IsNkRBQVcsQ0FBQTtJQUNYLG1EQUFNLENBQUE7SUFDTiwyREFBVSxDQUFBO0FBQ2QsQ0FBQyxFQU5XLFlBQVksS0FBWixZQUFZLFFBTXZCO0FBRUQsTUFBTSxDQUFOLElBQVksVUFHWDtBQUhELFdBQVksVUFBVTtJQUNsQix5REFBVyxDQUFBO0lBQ1gsNkNBQUssQ0FBQTtBQUNULENBQUMsRUFIVyxVQUFVLEtBQVYsVUFBVSxRQUdyQjtBQUVELE1BQU0sQ0FBTixJQUFZLFNBR1g7QUFIRCxXQUFZLFNBQVM7SUFDakIsMkNBQUssQ0FBQTtJQUNMLDJDQUFLLENBQUE7QUFDVCxDQUFDLEVBSFcsU0FBUyxLQUFULFNBQVMsUUFHcEI7QUFFRCxNQUFNLENBQU4sSUFBWSxhQUdYO0FBSEQsV0FBWSxhQUFhO0lBQ3JCLG1EQUFLLENBQUE7SUFDTCx5REFBUSxDQUFBO0FBQ1osQ0FBQyxFQUhXLGFBQWEsS0FBYixhQUFhLFFBR3hCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWxidW0sIEFydGlzdCwgTXVzaWNWaWRlbywgUGxheWxpc3QsIFNvbmcgfSBmcm9tIFwiLi9uZ3gtYXBwbGUtbXVzaWMubW9kZWxzXCI7XHJcblxyXG5leHBvcnQgZW51bSBNZWRpYUl0ZW1UeXBlIHtcclxuICAgIGFsYnVtcyxcclxuICAgIHNvbmdzLFxyXG4gICAgYXJ0aXN0cyxcclxuICAgIG11c2ljVmlkZW9zLFxyXG4gICAgcGxheWxpc3RzLFxyXG4gICAgc3RhdGlvbnNcclxufVxyXG5cclxuZXhwb3J0IGVudW0gUGxheWxpc3RUeXBlIHtcclxuICAgIGVkaXRvcmlhbCxcclxuICAgIGV4dGVybmFsLFxyXG4gICAgcGVyc29uYWxNaXgsXHJcbiAgICByZXBsYXksXHJcbiAgICB1c2VyU2hhcmVkXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIFRyYWNrVHlwZXMge1xyXG4gICAgbXVzaWNWaWRlb3MsXHJcbiAgICBzb25nc1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBNZWRpYUtpbmQge1xyXG4gICAgYXVkaW8sXHJcbiAgICB2aWRlb1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBDb250ZW50UmF0aW5nIHtcclxuICAgIGNsZWFuLFxyXG4gICAgZXhwbGljaXRcclxufVxyXG5cclxudHlwZSBBdHRyaWJ1dGVzID0ge1xyXG4gICAgYWxidW1OYW1lOiBzdHJpbmc7XHJcbiAgICBhcnRpc3ROYW1lOiBzdHJpbmc7XHJcbiAgICBhcnRpc3RVcmw/OiBzdHJpbmc7XHJcbiAgICBhcnR3b3JrPzogQXJ0d29yaztcclxuICAgIGF1ZGlvVmFyaWFudHM/OiBzdHJpbmdbXTtcclxuICAgIGNvbXBvc2VyTmFtZT86IHN0cmluZztcclxuICAgIGN1cmF0b3JOYW1lPzogc3RyaW5nO1xyXG4gICAgY29udGVudFJhdGluZz86IENvbnRlbnRSYXRpbmc7XHJcbiAgICBjb3B5cmlnaHQ/OiBzdHJpbmc7XHJcbiAgICBkZXNjcmlwdGlvbj86IERlc2NyaXB0aW9uO1xyXG4gICAgZGlzY051bWJlcj86IG51bWJlcjtcclxuICAgIGR1cmF0aW9uSW5NaWxsaXM6IG51bWJlcjtcclxuICAgIGVkaXRvcmlhbE5vdGVzPzogRWRpdG9yaWFsTm90ZXM7XHJcbiAgICBlcGlzb2RlTnVtYmVyPzogc3RyaW5nO1xyXG4gICAgaGFzNEs/OiBib29sZWFuO1xyXG4gICAgaGFzSERSPzogYm9vbGVhbjtcclxuICAgIGdlbnJlTmFtZXM/OiBzdHJpbmdbXTtcclxuICAgIGlzQ29tcGlsYXRpb246IGJvb2xlYW47XHJcbiAgICBpc0NvbXBsZXRlOiBib29sZWFuO1xyXG4gICAgaXNDaGFydD86IGJvb2xlYW47XHJcbiAgICBpc0xpdmU/OiBib29sZWFuO1xyXG4gICAgc3RhdGlvblByb3ZpZGVyTmFtZT86IHN0cmluZztcclxuICAgIG1lZGlhS2luZD86IE1lZGlhS2luZDtcclxuICAgIGlzTWFzdGVyZWRGb3JJdHVuZXM6IGJvb2xlYW47XHJcbiAgICBpc1NpbmdsZTogYm9vbGVhbjtcclxuICAgIGhhc0x5cmljczogYm9vbGVhbjtcclxuICAgIGlzQXBwbGVEaWdpdGFsTWFzdGVyOiBib29sZWFuO1xyXG4gICAgaXNyYz86IHN0cmluZztcclxuICAgIGxhc3RNb2RpZmllZERhdGU/OiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBwbGF5UGFyYW1zPzogUGxheVBhcmFtZXRlcnM7XHJcbiAgICBwbGF5bGlzdFR5cGU/OiBQbGF5bGlzdFR5cGU7XHJcbiAgICBwcmV2aWV3czogUHJldmlldztcclxuICAgIHJlY29yZExhYmVsPzogc3RyaW5nO1xyXG4gICAgcmVsZWFzZURhdGU/OiBzdHJpbmc7XHJcbiAgICB0cmFja0NvdW50OiBudW1iZXI7XHJcbiAgICB0cmFja1R5cGVzPzogVHJhY2tUeXBlc1tdO1xyXG4gICAgdHJhY2tOdW1iZXI/OiBudW1iZXI7XHJcbiAgICB2aWRlb1N1YlR5cGU/OiBzdHJpbmc7XHJcbiAgICB1cGM/OiBzdHJpbmc7XHJcbiAgICB1cmw6IHN0cmluZztcclxuXHJcbiAgICAvL2NsYXNzaWNhbCBvbmx5XHJcbiAgICBhdHRyaWJ1dGlvbj86IHN0cmluZztcclxuICAgIG1vdmVtZW50Q291bnQ/OiBudW1iZXI7XHJcbiAgICBtb3ZlbWVudE5hbWU/OiBzdHJpbmc7XHJcbiAgICBtb3ZlbWVudE51bWJlcj86IG51bWJlcjtcclxuICAgIHdvcmtJZD86IHN0cmluZztcclxuICAgIHdvcmtOYW1lPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBbGJ1bUF0dHJpYnV0ZXMgPSBSZXF1aXJlZDxQaWNrPEF0dHJpYnV0ZXMsICdhcnRpc3ROYW1lJyB8ICdhcnR3b3JrJyB8ICdnZW5yZU5hbWVzJyB8ICdpc0NvbXBpbGF0aW9uJyB8XHJcbiAgICAnaXNDb21wbGV0ZScgfCAnaXNNYXN0ZXJlZEZvckl0dW5lcycgfCAnaXNTaW5nbGUnIHwgJ25hbWUnIHwgJ3RyYWNrQ291bnQnIHwgJ3VybCc+PiBcclxuICAgICYgUGFydGlhbDxQaWNrPEF0dHJpYnV0ZXMsICdhcnRpc3RVcmwnIHwgJ2F1ZGlvVmFyaWFudHMnIHwgJ2NvbnRlbnRSYXRpbmcnIHwgJ2NvcHlyaWdodCcgXHJcbiAgICAgICAgfCAnZWRpdG9yaWFsTm90ZXMnIHwgJ3BsYXlQYXJhbXMnIHwgJ3JlY29yZExhYmVsJyB8ICdyZWxlYXNlRGF0ZScgfCAndXBjJz4+O1xyXG5cclxuZXhwb3J0IHR5cGUgQXJ0aXN0QXR0cmlidXRlcyA9IFJlcXVpcmVkPFBpY2s8QXR0cmlidXRlcywgJ2dlbnJlTmFtZXMnIHwgJ25hbWUnIHwgJ3VybCc+PlxyXG4gICAgJiBQYXJ0aWFsPFBpY2s8QXR0cmlidXRlcywgJ2FydHdvcmsnIHwgJ2VkaXRvcmlhbE5vdGVzJz4+O1xyXG5cclxuZXhwb3J0IHR5cGUgU29uZ0F0dHJpYnV0ZXMgPSBSZXF1aXJlZDxQaWNrPEF0dHJpYnV0ZXMsICdhbGJ1bU5hbWUnIHwgJ2FydGlzdE5hbWUnIHwgJ2FydHdvcmsnIHwgJ2dlbnJlTmFtZXMnIHwgJ2hhc0x5cmljcycgfCAnaXNBcHBsZURpZ2l0YWxNYXN0ZXInIHwgJ25hbWUnIHxcclxuICAgICdwcmV2aWV3cycgfCAndXJsJyB8ICdkdXJhdGlvbkluTWlsbGlzJz4+XHJcbiAgICAmIFBhcnRpYWw8UGljazxBdHRyaWJ1dGVzLCAnYXJ0aXN0VXJsJyB8ICdhdHRyaWJ1dGlvbicgfCAnYXVkaW9WYXJpYW50cycgfCAnY29tcG9zZXJOYW1lJyB8ICdjb250ZW50UmF0aW5nJyB8ICdkaXNjTnVtYmVyJyB8ICdlZGl0b3JpYWxOb3RlcycgfCAnaXNyYycgfFxyXG4gICAgICAgICdtb3ZlbWVudENvdW50JyB8ICdtb3ZlbWVudE5hbWUnIHwgJ21vdmVtZW50TnVtYmVyJyB8ICdwbGF5UGFyYW1zJyB8ICdyZWxlYXNlRGF0ZScgfCAndHJhY2tOdW1iZXInIHwgJ3dvcmtOYW1lJz4+O1xyXG5cclxuZXhwb3J0IHR5cGUgTXVzaWNWaWRlb0F0dHJpYnV0ZXMgPSBSZXF1aXJlZDxQaWNrPEF0dHJpYnV0ZXMsICdhcnRpc3ROYW1lJyB8ICdhcnR3b3JrJyB8ICdkdXJhdGlvbkluTWlsbGlzJyB8ICdnZW5yZU5hbWVzJyB8ICdoYXM0SycgfCAnaGFzSERSJyB8ICduYW1lJyB8XHJcbiAgICAncHJldmlld3MnIHwgJ3VybCc+PlxyXG4gICAgJiBQYXJ0aWFsPFBpY2s8QXR0cmlidXRlcywgJ2FsYnVtTmFtZScgfCAnYXJ0aXN0VXJsJyB8ICdjb250ZW50UmF0aW5nJyB8ICdlZGl0b3JpYWxOb3RlcycgfCAnaXNyYycgfCAncGxheVBhcmFtcycgfCAncmVsZWFzZURhdGUnIHwgJ3RyYWNrTnVtYmVyJyB8XHJcbiAgICAgICAgJ3ZpZGVvU3ViVHlwZScgfCAnd29ya0lkJyB8ICd3b3JrTmFtZSc+PjtcclxuXHJcbmV4cG9ydCB0eXBlIFBsYXlsaXN0QXR0cmlidXRlcyA9IFJlcXVpcmVkPFBpY2s8QXR0cmlidXRlcywgJ2N1cmF0b3JOYW1lJyB8ICdpc0NoYXJ0JyB8ICduYW1lJyB8ICdwbGF5bGlzdFR5cGUnIHwgJ3VybCc+PiBcclxuICAgICYgUGFydGlhbDxQaWNrPEF0dHJpYnV0ZXMsICdhcnR3b3JrJyB8ICdkZXNjcmlwdGlvbicgfCAnbGFzdE1vZGlmaWVkRGF0ZScgfCAncGxheVBhcmFtcycgfCAndHJhY2tUeXBlcyc+PjtcclxuXHJcbmV4cG9ydCB0eXBlIFN0YXRpb25BdHRyaWJ1dGVzID0gUmVxdWlyZWQ8UGljazxBdHRyaWJ1dGVzLCAnYXJ0d29yaycgfCAnaXNMaXZlJyB8ICdtZWRpYUtpbmQnIHwgJ25hbWUnIHwgJ3VybCc+PiBcclxuICAgICYgUGFydGlhbDxQaWNrPEF0dHJpYnV0ZXMsICdkdXJhdGlvbkluTWlsbGlzJyB8ICdlZGl0b3JpYWxOb3RlcycgfCAnZXBpc29kZU51bWJlcicgfCAnY29udGVudFJhdGluZycgfCAncGxheVBhcmFtcycgfCAnc3RhdGlvblByb3ZpZGVyTmFtZSc+PjtcclxuXHJcbmV4cG9ydCB0eXBlIFZpZXdBdHRyaWJ1dGVzID0ge1xyXG4gICAgdGl0bGU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgR2VucmVBdHRyaWJ1dGVzID0ge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgcGFyZW50SWQ/OiBzdHJpbmc7XHJcbiAgICBwYXJlbnROYW1lPzogc3RyaW5nO1xyXG4gICAgY2hhcnRMYWJlbD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgUmVjb3JkTGFiZWxBdHRyaWJ1dGVzID0ge1xyXG4gICAgYXJ0d29yazogQXJ0d29yaztcclxuICAgIGRlc2NyaXB0aW9uPzogRGVzY3JpcHRpb247XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB1cmw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTGlicmFyeUFsYnVtQXR0cmlidXRlcyA9IHtcclxuICAgIGFydGlzdE5hbWU6IHN0cmluZztcclxuICAgIGFydHdvcms6IEFydHdvcms7XHJcbiAgICBjb250ZW50UmF0aW5nPzogQ29udGVudFJhdGluZztcclxuICAgIGRhdGVBZGRlZD86IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHBsYXlQYXJhbXM/OiBQbGF5UGFyYW1ldGVycztcclxuICAgIHJlbGVhc2VEYXRlPzogc3RyaW5nO1xyXG4gICAgdHJhY2tDb3VudDogbnVtYmVyO1xyXG4gICAgZ2VucmVOYW1lczogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIExpYnJhcnlNdXNpY1ZpZGVvQXR0cmlidXRlcyA9IHtcclxuICAgIGFsYnVtTmFtZT86IHN0cmluZztcclxuICAgIGFydGlzdE5hbWU6IHN0cmluZztcclxuICAgIGFydHdvcms6IEFydHdvcms7XHJcbiAgICBjb250ZW50UmF0aW5nPzogQ29udGVudFJhdGluZztcclxuICAgIGR1cmF0aW9uSW5NaWxsaXM6IG51bWJlcjtcclxuICAgIGdlbnJlTmFtZXM6IHN0cmluZ1tdO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgcGxheVBhcmFtcz86IFBsYXlQYXJhbWV0ZXJzO1xyXG4gICAgcmVsZWFzZURhdGU/OiBzdHJpbmc7XHJcbiAgICB0cmFja051bWJlcj86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTGlicmFyeUFydGlzdEF0dHJpYnV0ZXMgPSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIExpYnJhcnlTb25nQXR0cmlidXRlcyA9IHtcclxuICAgIGFsYnVtTmFtZT86IHN0cmluZztcclxuICAgIGFydGlzdE5hbWU6IHN0cmluZztcclxuICAgIGFydHdvcms6IEFydHdvcms7XHJcbiAgICBjb250ZW50UmF0aW5nPzogQ29udGVudFJhdGluZztcclxuICAgIGRpc2NOdW1iZXI/OiBudW1iZXI7XHJcbiAgICBkdXJhdGlvbkluTWlsbGlzOiBudW1iZXI7XHJcbiAgICBnZW5yZU5hbWVzOiBzdHJpbmdbXTtcclxuICAgIGhhc0x5cmljczogYm9vbGVhbjtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHBsYXlQYXJhbXM/OiBQbGF5UGFyYW1ldGVycztcclxuICAgIHJlbGVhc2VEYXRlPzogc3RyaW5nO1xyXG4gICAgdHJhY2tOdW1iZXI/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEdlbnJlID0ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHR5cGU6IHN0cmluZztcclxuICAgIGhyZWY6IHN0cmluZztcclxuICAgIGF0dHJpYnV0ZXM/OiBHZW5yZUF0dHJpYnV0ZXM7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFJlY29yZExhYmVsID0ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHR5cGU6IGFueTtcclxuICAgIGhyZWY6IHN0cmluZztcclxuICAgIGF0dHJpYnV0ZXM/OiBSZWNvcmRMYWJlbEF0dHJpYnV0ZXM7XHJcbiAgICB2aWV3czogUmVjb3JkTGFiZWxWaWV3cztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgVHJhY2sgPSB7XHJcbiAgICBkYXRhOiBBcnJheTxNdXNpY1ZpZGVvIHwgU29uZz47XHJcbiAgICBocmVmPzogc3RyaW5nO1xyXG4gICAgbmV4dD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTGlicmFyeUFsYnVtID0ge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIHR5cGU6IGFueTtcclxuICAgIGhyZWY6IHN0cmluZztcclxuICAgIGF0dHJpYnV0ZXM/OiBMaWJyYXJ5QWxidW1BdHRyaWJ1dGVzO1xyXG4gICAgcmVsYXRpb25zaGlwcz86IExpYnJhcnlBbGJ1bVJlbGF0aW9uc2hpcHM7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIExpYnJhcnlBcnRpc3QgPSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdHlwZTogYW55O1xyXG4gICAgaHJlZjogc3RyaW5nO1xyXG4gICAgYXR0cmlidXRlcz86IExpYnJhcnlBcnRpc3RBdHRyaWJ1dGVzO1xyXG4gICAgcmVsYXRpb25zaGlwcz86IExpYnJhcnlBcnRpc3RSZWxhdGlvbnNoaXBzO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBMaWJyYXJ5TXVzaWNWaWRlbyA9IHtcclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICB0eXBlOiBhbnk7XHJcbiAgICBocmVmOiBzdHJpbmc7XHJcbiAgICBhdHRyaWJ1dGVzPzogTGlicmFyeU11c2ljVmlkZW9BdHRyaWJ1dGVzO1xyXG4gICAgcmVsYXRpb25zaGlwcz86IExpYnJhcnlNdXNpY1ZpZGVvUmVsYXRpb25zaGlwcztcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTGlicmFyeVNvbmcgPSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdHlwZTogYW55O1xyXG4gICAgaHJlZjogc3RyaW5nO1xyXG4gICAgYXR0cmlidXRlcz86IExpYnJhcnlTb25nQXR0cmlidXRlcztcclxuICAgIHJlbGF0aW9uc2hpcHM/OiBMaWJyYXJ5U29uZ1JlbGF0aW9uc2hpcHM7XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFZpZXc8VD4gPSB7XHJcbiAgICBocmVmPzogc3RyaW5nO1xyXG4gICAgbmV4dD86IHN0cmluZztcclxuICAgIGF0dHJpYnV0ZXM6IFZpZXdBdHRyaWJ1dGVzO1xyXG4gICAgZGF0YTogVFtdO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBSZWNvcmRMYWJlbFZpZXdzID0ge1xyXG4gICAgbGF0ZXN0UmVsZWFzZXM/OiBWaWV3PEFsYnVtPjtcclxuICAgIHRvcFJlbGVhc2VzPzogVmlldzxBbGJ1bT47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFsYnVtVmlld3MgPSB7XHJcbiAgICBhcHBlYXJzT24/OiBWaWV3PFBsYXlsaXN0PjtcclxuICAgIG90aGVyVmVyc2lvbnM/OiBWaWV3PEFsYnVtPjtcclxuICAgIHJlbGF0ZWRBbGJ1bXM/OiBWaWV3PEFsYnVtPjtcclxuICAgIHJlbGF0ZWRWaWRlb3M/OiBWaWV3PE11c2ljVmlkZW8+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBcnRpc3RWaWV3cyA9IHtcclxuICAgIGFwcGVhcnNPbkFsYnVtcz86IFZpZXc8QWxidW0+O1xyXG4gICAgY29tcGlsYXRpb25BbGJ1bXM/OiBWaWV3PEFsYnVtPjtcclxuICAgIGZlYXR1cmVkQWxidW1zPzogVmlldzxBbGJ1bT47XHJcbiAgICBmZWF0dXJlZE11c2ljVmlkZW9zPzogVmlldzxNdXNpY1ZpZGVvPjtcclxuICAgIGZlYXR1cmVkUGxheWxpc3RzPzogVmlldzxQbGF5bGlzdD47XHJcbiAgICBmdWxsQWxidW1zOiBWaWV3PEFsYnVtPjtcclxuICAgIGxhdGVzdFJlbGVhc2VzOiBWaWV3PEFsYnVtPjtcclxuICAgIGxpdmVBbGJ1bXM6IFZpZXc8QWxidW0+O1xyXG4gICAgc2ltaWxhckFydGlzdHM6IFZpZXc8QXJ0aXN0PjtcclxuICAgIHNpbmdsZXM6IFZpZXc8QWxidW0+O1xyXG4gICAgdG9wTXVzaWNWaWRlb3M6IFZpZXc8TXVzaWNWaWRlbz47XHJcbiAgICB0b3BTb25nczogVmlldzxTb25nPjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTXVzaWNWaWRlb1ZpZXdzID0ge1xyXG4gICAgbW9yZUJ5QXJ0aXN0OiBWaWV3PE11c2ljVmlkZW8+O1xyXG4gICAgbW9yZUluR2VucmU6IFZpZXc8TXVzaWNWaWRlbz47XHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFBsYXlsaXN0Vmlld3MgPSB7XHJcbiAgICBmZWF0dXJlZEFydGlzdHM6IFZpZXc8QXJ0aXN0PjtcclxuICAgIG1vcmVCeUN1cmF0b3I6IFZpZXc8UGxheWxpc3Q+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBSZWxhdGlvbnNoaXA8VD4gPSB7XHJcbiAgICBocmVmPzogc3RyaW5nO1xyXG4gICAgbmV4dD86IHN0cmluZztcclxuICAgIGRhdGE/OiBUW107XHJcbiAgICBtZXRhPzogYW55O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBMaWJyYXJ5QWxidW1SZWxhdGlvbnNoaXBzID0ge1xyXG4gICAgYXJ0aXN0cz86IFJlbGF0aW9uc2hpcDxMaWJyYXJ5QXJ0aXN0PjtcclxuICAgIGNhdGFsb2c/OiBSZWxhdGlvbnNoaXA8QWxidW0+O1xyXG4gICAgdHJhY2tzPzogUmVsYXRpb25zaGlwPEFycmF5PExpYnJhcnlNdXNpY1ZpZGVvIHwgTGlicmFyeVNvbmc+PjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTGlicmFyeU11c2ljVmlkZW9SZWxhdGlvbnNoaXBzID0ge1xyXG4gICAgYWxidW1zPzogUmVsYXRpb25zaGlwPExpYnJhcnlBbGJ1bT47XHJcbiAgICBhcnRpc3RzPzogUmVsYXRpb25zaGlwPExpYnJhcnlBcnRpc3Q+O1xyXG4gICAgY2F0YWxvZz86IFJlbGF0aW9uc2hpcDxNdXNpY1ZpZGVvPjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTGlicmFyeUFydGlzdFJlbGF0aW9uc2hpcHMgPSB7XHJcbiAgICBhbGJ1bXM/OiBSZWxhdGlvbnNoaXA8TGlicmFyeUFsYnVtPjtcclxuICAgIGFydGlzdHM/OiBSZWxhdGlvbnNoaXA8TGlicmFyeUFydGlzdD47XHJcbiAgICBjYXRhbG9nPzogUmVsYXRpb25zaGlwPE11c2ljVmlkZW8+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBMaWJyYXJ5U29uZ1JlbGF0aW9uc2hpcHMgPSB7XHJcbiAgICBhbGJ1bXM/OiBSZWxhdGlvbnNoaXA8TGlicmFyeUFsYnVtPjtcclxuICAgIGFydGlzdHM/OiBSZWxhdGlvbnNoaXA8TGlicmFyeUFydGlzdD47XHJcbiAgICBjYXRhbG9nPzogUmVsYXRpb25zaGlwPFNvbmc+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBbGJ1bVJlbGF0aW9uc2hpcHMgPSB7XHJcbiAgICBhcnRpc3RzOiBSZWxhdGlvbnNoaXA8QXJ0aXN0PjtcclxuICAgIGdlbnJlczogUmVsYXRpb25zaGlwPEdlbnJlPjtcclxuICAgIHRyYWNrczogUmVsYXRpb25zaGlwPFRyYWNrPjtcclxuICAgIGxpYnJhcnk6IFJlbGF0aW9uc2hpcDxMaWJyYXJ5QWxidW0+O1xyXG4gICAgcmVjb3JkTGFiZWxzOiBSZWxhdGlvbnNoaXA8UmVjb3JkTGFiZWw+OyAgIFxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBBcnRpc3RSZWxhdGlvbnNoaXBzID0ge1xyXG4gICAgYWxidW1zOiBhbnk7XHJcbiAgICBnZW5yZXM6IGFueTtcclxuICAgIG11c2ljVmlkZW9zOiBhbnk7XHJcbiAgICBwbGF5bGlzdHM6IGFueTtcclxuICAgIHN0YXRpb246IGFueTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU29uZ1JlbGF0aW9uc2hpcHMgPSB7XHJcbiAgICBhbGJ1bXM6IGFueTtcclxuICAgIGFydGlzdHM6IGFueTtcclxuICAgIGNvbXBvc2VyczogYW55O1xyXG4gICAgZ2VucmVzOiBhbnk7XHJcbiAgICBsaWJyYXJ5OiBhbnk7XHJcbiAgICBtdXNpY1ZpZGVvczogYW55O1xyXG4gICAgc3RhdGlvbjogYW55O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNdXNpY1ZpZGVvUmVsYXRpb25zaGlwcyA9IHtcclxuICAgIGFsYnVtczogYW55O1xyXG4gICAgYXJ0aXN0czogYW55O1xyXG4gICAgZ2VucmVzOiBhbnk7XHJcbiAgICBsaWJyYXJ5OiBhbnk7XHJcbiAgICBzb25nczogYW55O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBQbGF5bGlzdFJlbGF0aW9uc2hpcHMgPSB7XHJcbiAgICBjdXJhdG9yOiBhbnk7XHJcbiAgICBsaWJyYXJ5OiBhbnk7XHJcbiAgICB0cmFja3M6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU3RhdGlvblJlbGF0aW9uc2hpcHMgPSB7XHJcbiAgICByYWRpb1Nob3c6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFZGl0b3JpYWxOb3RlcyB7XHJcbiAgICBzaG9ydD86IHN0cmluZztcclxuICAgIHN0YW5kYXJkPzogc3RyaW5nO1xyXG4gICAgbmFtZT86IHN0cmluZztcclxuICAgIHRhZ2xpbmU/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGxheVBhcmFtZXRlcnMge1xyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIGtpbmQ6IE1lZGlhS2luZDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBcnR3b3JrIHtcclxuICAgIGJnQ29sb3I/OiBzdHJpbmc7XHJcbiAgICBoZWlnaHQ6IG51bWJlcjtcclxuICAgIHdpZHRoOiBudW1iZXI7XHJcbiAgICB0ZXh0Q29sb3IxPzogc3RyaW5nO1xyXG4gICAgdGV4dENvbG9yMj86IHN0cmluZztcclxuICAgIHRleHRDb2xvcjM/OiBzdHJpbmc7XHJcbiAgICB0ZXh0Q29sb3I0Pzogc3RyaW5nO1xyXG4gICAgdXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGVzY3JpcHRpb24ge1xyXG4gICAgc2hvcnQ/OiBzdHJpbmc7XHJcbiAgICBzdGFuZGFyZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFByZXZpZXcge1xyXG4gICAgYXJ0d29yaz86IEFydHdvcms7XHJcbiAgICB1cmw6IHN0cmluZztcclxuICAgIGhsc1VybD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNZWRpYUl0ZW1Db25zdHJ1Y3RvcjxUPiB7XHJcbiAgICBuZXcoKTogTWVkaWFJdGVtPFQ+O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBNZWRpYUl0ZW08VD4gPSB7XHJcbiAgICBpZDogc3RyaW5nO1xyXG4gICAgdHlwZTogTWVkaWFJdGVtVHlwZTtcclxuICAgIGhyZWY6IHN0cmluZztcclxuICAgIGF0dHJpYnV0ZXM/OiBBbGJ1bUF0dHJpYnV0ZXMgfCBBcnRpc3RBdHRyaWJ1dGVzIHwgTXVzaWNWaWRlb0F0dHJpYnV0ZXMgfCBTb25nQXR0cmlidXRlcyB8IFN0YXRpb25BdHRyaWJ1dGVzIHwgUGxheWxpc3RBdHRyaWJ1dGVzO1xyXG4gICAgcmVsYXRpb25zaGlwcz86IFJlbGF0aW9uc2hpcDxUPjtcclxuICAgIHZpZXdzPzogVmlldzxUPjtcclxuXHJcbiAgICAvL3JldHVybiBwcm9taXNlXHJcbiAgICBwcmVwYXJlVG9QbGF5KCk6IGFueTtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTWVkaWFJdGVtT3B0aW9ucyA9IHtcclxuICAgIGF0dHJpYnV0ZXM6IGFueTtcclxuICAgIGlkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XHJcbiAgICB0eXBlOiBNZWRpYUl0ZW1UeXBlO1xyXG59Il19