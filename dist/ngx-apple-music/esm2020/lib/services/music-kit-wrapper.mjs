import { Album } from "../ngx-apple-music.models";
export var MusicKitWrapper;
(function (MusicKitWrapper) {
    var queue = new Array();
    async function getInstance() {
        return MusicKit.getInstance();
    }
    MusicKitWrapper.getInstance = getInstance;
    //media playback & management
    async function play() {
        console.log('called');
        setQueue(queue);
        let instance = MusicKit.getInstance();
        instance.player.play();
    }
    MusicKitWrapper.play = play;
    async function getUserPlaylists() {
        console.log('called');
        let instance = await MusicKit.getInstance();
        console.log('me: ' + await MusicKit.getInstance().me);
        let playlists = await instance.api.library.playlists(null);
        console.log(playlists);
        let playlistId = playlists[1].id;
        await instance.setQueue({
            playlist: playlistId,
        }).then(async () => await instance.player.prepareToPlay().then(async () => await instance.player.play()));
    }
    MusicKitWrapper.getUserPlaylists = getUserPlaylists;
    async function setQueue(queue, _) {
        let instance = MusicKit.getInstance();
        queue.push(new Album({ id: '1', href: '' }));
        return instance.setQueue(queue);
    }
    MusicKitWrapper.setQueue = setQueue;
    async function playNext(queue, _) {
        let instance = MusicKit.getInstance();
        return instance.player.queue.prepend(queue);
    }
    MusicKitWrapper.playNext = playNext;
    async function playLast(queue, _) {
        let instance = MusicKit.getInstance();
        return instance.player.queue.append(queue);
    }
    MusicKitWrapper.playLast = playLast;
    //init
    async function configureMusicKit(devToken, appName, buildVer) {
        console.log(await initMusicKit(devToken, appName, buildVer).then(async () => await checkIfUserIsAuthorized()
            .then(async (res) => { console.log(await MusicKit.getInstance().musicUserToken); return !res ? await startAuthentication() : null; })));
    }
    MusicKitWrapper.configureMusicKit = configureMusicKit;
    ;
    async function initMusicKit(devToken, appName, buildVer) {
        await MusicKit.configure({
            developerToken: devToken,
            app: {
                name: appName,
                build: buildVer,
            },
        });
    }
    MusicKitWrapper.initMusicKit = initMusicKit;
    // export async function internalInit() {
    //     queue = new Array<MediaItem>();
    //     queuePosition = 0;
    // }
    //auth
    async function startAuthentication() {
        return await MusicKit.getInstance().authorize();
    }
    MusicKitWrapper.startAuthentication = startAuthentication;
    async function checkIfUserIsAuthorized() {
        return MusicKit.getInstance().isAuthorized;
    }
    MusicKitWrapper.checkIfUserIsAuthorized = checkIfUserIsAuthorized;
})(MusicKitWrapper || (MusicKitWrapper = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVzaWMta2l0LXdyYXBwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtYXBwbGUtbXVzaWMvc3JjL2xpYi9zZXJ2aWNlcy9tdXNpYy1raXQtd3JhcHBlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFJbEQsTUFBTSxLQUFRLGVBQWUsQ0E2RTVCO0FBN0VELFdBQWMsZUFBZTtJQUN6QixJQUFJLEtBQUssR0FBaUIsSUFBSSxLQUFLLEVBQVMsQ0FBQztJQUV0QyxLQUFLLFVBQVUsV0FBVztRQUM3QixPQUFPLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRnFCLDJCQUFXLGNBRWhDLENBQUE7SUFFRCw2QkFBNkI7SUFFdEIsS0FBSyxVQUFVLElBQUk7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDaEIsSUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUxxQixvQkFBSSxPQUt6QixDQUFBO0lBRU0sS0FBSyxVQUFVLGdCQUFnQjtRQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3RCLElBQUksUUFBUSxHQUFHLE1BQU0sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELElBQUksU0FBUyxHQUFHLE1BQU0sUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNE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QztJQUZxQixtQ0FBbUIsc0JBRXhDLENBQUE7SUFFTSxLQUFLLFVBQVUsdUJBQXVCO1FBQ3pDLE9BQU8sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLFlBQVksQ0FBQztJQUMvQyxDQUFDO0lBRnFCLHVDQUF1QiwwQkFFNUMsQ0FBQTtBQUNMLENBQUMsRUE3RWEsZUFBZSxLQUFmLGVBQWUsUUE2RTVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVkaWFJdGVtIH0gZnJvbSBcIi4uL25neC1hcHBsZS1tdXNpYy5pbnRlcmZhY2VcIjtcclxuaW1wb3J0IHsgQWxidW0gfSBmcm9tIFwiLi4vbmd4LWFwcGxlLW11c2ljLm1vZGVsc1wiO1xyXG5cclxuZGVjbGFyZSBsZXQgTXVzaWNLaXQ6IGFueTtcclxuXHJcbmV4cG9ydCBtb2R1bGUgTXVzaWNLaXRXcmFwcGVyIHtcclxuICAgIHZhciBxdWV1ZTogQXJyYXk8QWxidW0+ID0gbmV3IEFycmF5PEFsYnVtPigpO1xyXG5cclxuICAgIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRJbnN0YW5jZSgpIHtcclxuICAgICAgICByZXR1cm4gTXVzaWNLaXQuZ2V0SW5zdGFuY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL21lZGlhIHBsYXliYWNrICYgbWFuYWdlbWVudFxyXG5cclxuICAgIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwbGF5KCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcclxuICAgICAgICBzZXRRdWV1ZShxdWV1ZSk7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gTXVzaWNLaXQuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICBpbnN0YW5jZS5wbGF5ZXIucGxheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyUGxheWxpc3RzKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjYWxsZWQnKTtcclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSBhd2FpdCBNdXNpY0tpdC5nZXRJbnN0YW5jZSgpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtZTogJyArIGF3YWl0IE11c2ljS2l0LmdldEluc3RhbmNlKCkubWUpO1xyXG4gICAgICAgIGxldCBwbGF5bGlzdHMgPSBhd2FpdCBpbnN0YW5jZS5hcGkubGlicmFyeS5wbGF5bGlzdHMobnVsbCk7XHJcbiAgICAgICAgY29uc29sZS5sb2cocGxheWxpc3RzKTtcclxuICAgICAgICBsZXQgcGxheWxpc3RJZCA9IHBsYXlsaXN0c1sxXS5pZDtcclxuICAgICAgICBhd2FpdCBpbnN0YW5jZS5zZXRRdWV1ZSh7XHJcbiAgICAgICAgICAgIHBsYXlsaXN0OiBwbGF5bGlzdElkLFxyXG4gICAgICAgIH0pLnRoZW4oYXN5bmMgKCkgPT4gYXdhaXQgaW5zdGFuY2UucGxheWVyLnByZXBhcmVUb1BsYXkoKS50aGVuKGFzeW5jICgpID0+IFxyXG4gICAgICAgIGF3YWl0IGluc3RhbmNlLnBsYXllci5wbGF5KCkpKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gc2V0UXVldWUocXVldWU6IEFycmF5PEFsYnVtPiwgXz86IGFueSkge1xyXG4gICAgICAgIGxldCBpbnN0YW5jZSA9IE11c2ljS2l0LmdldEluc3RhbmNlKCk7XHJcbiAgICAgICAgcXVldWUucHVzaChuZXcgQWxidW0oe2lkOiAnMScsIGhyZWY6ICcnfSkpO1xyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5zZXRRdWV1ZShxdWV1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHBsYXlOZXh0IChxdWV1ZTogYW55LCBfPzogYW55KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gTXVzaWNLaXQuZ2V0SW5zdGFuY2UoKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2UucGxheWVyLnF1ZXVlLnByZXBlbmQocXVldWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwbGF5TGFzdChxdWV1ZTogYW55LCBfPzogYW55KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gTXVzaWNLaXQuZ2V0SW5zdGFuY2UoKTsgIFxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5wbGF5ZXIucXVldWUuYXBwZW5kKHF1ZXVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvL2luaXRcclxuXHJcbiAgICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gY29uZmlndXJlTXVzaWNLaXQoZGV2VG9rZW46IHN0cmluZywgYXBwTmFtZTogc3RyaW5nLCBidWlsZFZlcjogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYXdhaXQgaW5pdE11c2ljS2l0KGRldlRva2VuLCBhcHBOYW1lLCBidWlsZFZlcikudGhlbihhc3luYyAoKSA9PiBhd2FpdCBjaGVja0lmVXNlcklzQXV0aG9yaXplZCgpXHJcbiAgICAgICAgLnRoZW4oYXN5bmMgKHJlcykgPT4geyBjb25zb2xlLmxvZyhhd2FpdCBNdXNpY0tpdC5nZXRJbnN0YW5jZSgpLm11c2ljVXNlclRva2VuKTsgcmV0dXJuICFyZXMgPyBhd2FpdCBzdGFydEF1dGhlbnRpY2F0aW9uKCkgOiBudWxsfSkpKTtcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXRNdXNpY0tpdChkZXZUb2tlbjogc3RyaW5nLCBhcHBOYW1lOiBzdHJpbmcsIGJ1aWxkVmVyOiBzdHJpbmcpIHtcclxuICAgICAgICBhd2FpdCBNdXNpY0tpdC5jb25maWd1cmUoe1xyXG4gICAgICAgICAgICBkZXZlbG9wZXJUb2tlbjogZGV2VG9rZW4sXHJcbiAgICAgICAgICAgIGFwcDoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogYXBwTmFtZSxcclxuICAgICAgICAgICAgICAgIGJ1aWxkOiBidWlsZFZlcixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICAvLyBleHBvcnQgYXN5bmMgZnVuY3Rpb24gaW50ZXJuYWxJbml0KCkge1xyXG4gICAgLy8gICAgIHF1ZXVlID0gbmV3IEFycmF5PE1lZGlhSXRlbT4oKTtcclxuICAgIC8vICAgICBxdWV1ZVBvc2l0aW9uID0gMDtcclxuICAgIC8vIH1cclxuXHJcbiAgICAvL2F1dGhcclxuXHJcbiAgICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRBdXRoZW50aWNhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gYXdhaXQgTXVzaWNLaXQuZ2V0SW5zdGFuY2UoKS5hdXRob3JpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tJZlVzZXJJc0F1dGhvcml6ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIE11c2ljS2l0LmdldEluc3RhbmNlKCkuaXNBdXRob3JpemVkO1xyXG4gICAgfVxyXG59Il19